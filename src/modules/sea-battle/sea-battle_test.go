package seabattle

import "testing"

type IsShipKilledCase struct {
	enemy    *Player
	step     NewStepReqMsg
	expected bool
	CaseName string
}

func TestIsShipKilled(t *testing.T) {
	var tests = []IsShipKilledCase{
		// IsShipKilledCase{&Player{positions: `
		// A1,A2,A3,A4,A5+*,A6+,A7,A8,A9,A10,
		// B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,
		// C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,
		// D1,D2,D3,D4+,D5+,D6,D7+,D8,D9,D10,
		// E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,
		// F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,
		// G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,
		// H1,H2,H3,H4,H5+,H6,H7,H8,H9,H10,
		// I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,
		// J1,J2,J3,J4,J5,J6,J7,J8,J9,J10,
		// `}, NewStepReqMsg{"A6"}, true, "A_ROW 2cell kill"},
		// IsShipKilledCase{&Player{positions: `
		// A1+*,A2+,A3+,A4+,A5,A6,A7,A8,A9,A10+,
		// B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,
		// C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,
		// D1,D2+,D3,D4,D5,D6,D7,D8,D9,D10,
		// E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,
		// F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,
		// G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,
		// H1,H2,H3,H4,H5,H6,H7,H8,H9,H10,
		// I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,
		// J1,J2,J3,J4,J5,J6,J7,J8,J9,J10,
		// `}, NewStepReqMsg{"A2"}, false, "A_ROW 4cell hit"},
		// IsShipKilledCase{&Player{positions: `
		// A1+*,A2+,A3+,A4,A5,A6,A7,A8,A9,A10,
		// B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,
		// C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,
		// D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,
		// E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,
		// F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,
		// G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,
		// H1,H2,H3,H4,H5,H6,H7,H8,H9,H10,
		// I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,
		// J1,J2,J3,J4,J5,J6,J7,J8,J9,J10,
		// `}, NewStepReqMsg{"A3"}, false, "A_ROW 3cell edge hit"},
		// IsShipKilledCase{&Player{positions: `
		// A1+*,A2+,A3+*,A4+*,A5,A6,A7,A8,A9,A10,
		// B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,
		// C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,
		// D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,
		// E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,
		// F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,
		// G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,
		// H1,H2,H3,H4,H5,H6,H7,H8,H9,H10,
		// I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,
		// J1,J2,J3,J4,J5,J6,J7,J8,J9,J10,
		// `}, NewStepReqMsg{"A2"}, true, "A_ROW 4cell kill"},
		// IsShipKilledCase{&Player{positions: `
		// A1+*,A2+,A3,A4+*,A5,A6,A7,A8,A9,A10,
		// B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,
		// C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,
		// D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,
		// E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,
		// F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,
		// G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,
		// H1,H2,H3,H4,H5,H6,H7,H8,H9,H10,
		// I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,
		// J1,J2,J3,J4,J5,J6,J7,J8,J9,J10,
		// `}, NewStepReqMsg{"A2"}, true, "A_ROW 2cell kill near 1cell"},
		IsShipKilledCase{&Player{positions: `m
        A1+,A2+*,A3+*,A4+,A5,A6,A7,A8,A9,A10,
        B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,
        C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,
        D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,
        E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,
        F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,
        G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,
        H1,H2,H3,H4,H5,H6,H7,H8,H9,H10,
        I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,
        J1,J2,J3,J4,J5,J6,J7,J8,J9,J10,
        `}, NewStepReqMsg{"A4"}, false, "A_ROW 4cell edge hit"},
		// IsShipKilledCase{&Player{positions: `
		// A1+,A2+*,A3+*,A4+,A5,A6,A7,A8,A9,A10,
		// B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,
		// C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,
		// D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,
		// E1,E2,E3+,E4,E5,E6,E7,E8,E9,E10,
		// F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,
		// G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,
		// H1,H2,H3,H4,H5,H6,H7,H8,H9,H10,
		// I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,
		// J1,J2,J3,J4,J5,J6,J7,J8,J9,J10,
		// `}, NewStepReqMsg{"E3"}, true, "E_ROW 1cell kill"},
		// IsShipKilledCase{&Player{positions: `
		// A1+,A2+*,A3+*,A4+,A5,A6,A7,A8,A9,A10,
		// B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,
		// C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,
		// D1,D2,D3,D4,D5,D6,D7,D8,D9,D10+,
		// E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,
		// F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,
		// G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,
		// H1,H2,H3,H4,H5,H6,H7,H8,H9,H10,
		// I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,
		// J1,J2,J3,J4,J5,J6,J7,J8,J9,J10,
		// `}, NewStepReqMsg{"D10"}, true, "D_ROW 1cell left edge kill"},
		// IsShipKilledCase{&Player{positions: `
		// A1+,A2+*,A3+*,A4+,A5,A6,A7,A8,A9,A10,
		// B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,
		// C1+,C2,C3,C4,C5,C6,C7,C8,C9,C10,
		// D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,
		// E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,
		// F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,
		// G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,
		// H1,H2,H3,H4,H5,H6,H7,H8,H9,H10,
		// I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,
		// J1,J2,J3,J4,J5,J6,J7,J8,J9,J10,
		// `}, NewStepReqMsg{"C1"}, true, "C_ROW 1cell right edge kill"},
		// IsShipKilledCase{&Player{positions: `
		// A1+,A2+*,A3+*,A4+,A5,A6,A7,A8,A9,A10,
		// B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,
		// C1+,C2,C3,C4,C5,C6,C7,C8,C9,C10,
		// D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,
		// E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,
		// F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,
		// G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,
		// H1,H2,H3,H4,H5,H6,H7,H8,H9,H10,
		// I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,
		// J1,J2,J3,J4,J5,J6,J7,J8,J9,J10,
		// `}, NewStepReqMsg{"C2"}, false, "C_ROW 1cell right edge miss"},
		// IsShipKilledCase{&Player{positions: `
		// A1+,A2+,A3,A4+,A5,A6,A7,A8,A9,A10,
		// B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,
		// C1+,C2,C3,C4,C5,C6,C7,C8,C9,C10,
		// D1,D2,D3,D4+,D5,D6,D7,D8,D9,D10,
		// E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,
		// F1+,F2+,F3+,F4,F5,F6,F7,F8,F9,F10,
		// G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,
		// H1,H2,H3,H4,H5,H6,H7,H8,H9,H10,
		// I1,I2+,I3+,I4+,I5+,I6,I7+,I8,I9,I10,
		// J1,J2,J3,J4,J5,J6,J7,J8,J9,J10,
		// `}, NewStepReqMsg{"I7"}, true, "I_ROW 1cell middle kill"},
		// IsShipKilledCase{&Player{positions: `
		// A1+,A2+*,A3+*,A4+,A5,A6,A7,A8,A9,A10,
		// B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,
		// C1+,C2,C3,C4,C5,C6,C7,C8,C9,C10,
		// D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,
		// E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,
		// F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,
		// G1,G2,G3,G4,G5+,G6+,G7,G8,G9,G10,
		// H1,H2,H3,H4,H5,H6,H7,H8,H9,H10,
		// I1,I2+,I3,I4,I5,I6,I7,I8,I9,I10,
		// J1,J2+,J3,J4,J5+*,J6+*,J7+*,J8+,J9,J10,
		// `}, NewStepReqMsg{"J8"}, true, "J_ROW 4cell kill"},
		// IsShipKilledCase{&Player{positions: `
		// A1+,A2+*,A3+*,A4+,A5,A6,A7,A8,A9,A10,
		// B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,
		// C1+,C2,C3,C4,C5,C6,C7,C8,C9,C10,
		// D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,
		// E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,
		// F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,
		// G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,
		// H1,H2,H3,H4,H5,H6,H7,H8,H9,H10,
		// I1,I2,I3,I4,I5,I6,I7,I8+*,I9+,I10+*,
		// J1,J2,J3,J4,J5,J6,J7,J8,J9,J10,
		// `}, NewStepReqMsg{"A1"}, true, "A_ROW 1cell left edge kill"},
		// IsShipKilledCase{&Player{positions: `
		// A1+,A2+*,A3+*,A4+,A5,A6,A7,A8,A9,A10+,
		// B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,
		// C1+,C2,C3,C4,C5,C6,C7,C8,C9,C10,
		// D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,
		// E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,
		// F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,
		// G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,
		// H1,H2,H3,H4,H5,H6,H7,H8,H9,H10,
		// I1,I2,I3,I4,I5,I6,I7,I8+*,I9+,I10+*,
		// J1,J2,J3,J4,J5,J6,J7,J8,J9,J10,
		// `}, NewStepReqMsg{"A10"}, true, "A_ROW 1cell right edge kill"},
		// IsShipKilledCase{&Player{positions: `
		// A1+,A2+*,A3+*,A4+,A5,A6,A7,A8,A9,A10,
		// B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,
		// C1+,C2,C3,C4,C5,C6,C7,C8,C9,C10,
		// D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,
		// E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,
		// F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,
		// G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,
		// H1,H2,H3,H4,H5,H6,H7,H8,H9,H10,
		// I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,
		// J1+,J2,J3,J4,J5,J6,J7,J8,J9,J10,
		// `}, NewStepReqMsg{"J1"}, true, "J_ROW 1cell left edge kill"},
		// IsShipKilledCase{&Player{positions: `
		// A1+,A2+*,A3+*,A4+,A5,A6,A7,A8,A9,A10,
		// B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,
		// C1+,C2,C3,C4,C5,C6,C7,C8,C9,C10,
		// D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,
		// E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,
		// F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,
		// G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,
		// H1,H2,H3,H4,H5,H6,H7,H8,H9,H10,
		// I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,
		// J1+,J2,J3,J4,J5,J6,J7,J8,J9,J10+,
		// `}, NewStepReqMsg{"J10"}, true, "J_ROW 1cell right edge kill"},
	}
	eh := NewEventHandlers(Room{})

	for _, tt := range tests {
		answer := eh.isShipKilled(tt.enemy, tt.step)
		t.Run(tt.CaseName, func(t *testing.T) {
			if answer != tt.expected {
				t.Errorf("%s got %v, expected %v", tt.CaseName, answer, tt.expected)
			}
		})
	}
}
